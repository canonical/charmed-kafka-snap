name: charmed-kafka
base: core22
version: '3.6.1'
summary: Apache Kafka in a snap.
description: |
  This is a snap that bundles Apache Kafka together with other tools of its ecosystem in order to be used in Charmed Operators, providing automated operations management from day 0 to day 2 on the Apache Kafka real-time stream processing, on top of a Virtual Machine cluster and K8s cluster. It is an open source, end-to-end, production ready data platform on top of cloud native technologies.
grade: stable
confinement: strict

system-usernames:
  snap_daemon: shared

hooks:
  install:
    plugs:
      - network
      - network-bind
      - mount-observe

environment:
  JAVA_HOME: $SNAP/usr/lib/jvm/java-18-openjdk-amd64

slots:
  kafka-logs:
    interface: content
    source:
      read:
        - $SNAP_COMMON/var/log/kafka
  cc-logs:
    interface: content
    source:
      read:
        - $SNAP_COMMON/var/log/cruise-control

apps:
  daemon:
    command: opt/kafka/bin/start-wrapper.bash
    daemon: simple
    install-mode: disable
    environment:
      LOG_DIR: $SNAP_COMMON/var/log/kafka
    plugs:
      - network
      - network-bind
      - removable-media
      - mount-observe
  cruise-control:
    command:  opt/cruise-control/bin/start-wrapper.bash
    daemon: simple
    install-mode: disable
    environment:
      LOG_DIR: $SNAP_COMMON/var/log/cruise-control
    plugs:
      - network
      - network-bind
      - mount-observe
  log-dirs:
    command: opt/kafka/bin/bin-wrapper.bash
    plugs:
      - network
      - network-bind
      - mount-observe
    environment:
      bin_script: kafka-log-dirs.sh
  storage:
    command: opt/kafka/bin/bin-wrapper.bash
    plugs:
      - network
      - network-bind
      - mount-observe
    environment:
      bin_script: kafka-storage.sh
  consumer-perf-test:
    command: opt/kafka/bin/bin-wrapper.bash
    plugs:
      - network
      - network-bind
      - mount-observe
    environment:
      bin_script: kafka-consumer-perf-test.sh
  producer-perf-test:
    command: opt/kafka/bin/bin-wrapper.bash
    plugs:
      - network
      - network-bind
      - mount-observe
    environment:
      bin_script: kafka-producer-perf-test.sh
  configs:
    command: opt/kafka/bin/bin-wrapper.bash
    plugs:
      - network
      - network-bind
      - mount-observe
    environment:
      bin_script: kafka-configs.sh
  topics:
    command: opt/kafka/bin/bin-wrapper.bash
    plugs:
      - network
      - network-bind
      - mount-observe
    environment:
      bin_script: kafka-topics.sh
  console-consumer:
    command: opt/kafka/bin/bin-wrapper.bash
    plugs:
      - network
      - network-bind
      - mount-observe
    environment:
      bin_script: kafka-console-consumer.sh
  console-producer:
    command: opt/kafka/bin/bin-wrapper.bash
    plugs:
      - network
      - network-bind
      - mount-observe
    environment:
      bin_script: kafka-console-producer.sh
  consumer-groups:
    command: opt/kafka/bin/bin-wrapper.bash
    plugs:
      - network
      - network-bind
      - mount-observe
    environment:
      bin_script: kafka-consumer-groups.sh
  get-offsets:
    command: opt/kafka/bin/bin-wrapper.bash
    plugs:
      - network
      - network-bind
      - mount-observe
    environment:
      bin_script: kafka-get-offsets.sh
  reassign-partitions:
    command: opt/kafka/bin/bin-wrapper.bash
    plugs:
      - network
      - network-bind
      - mount-observe
    environment:
      bin_script: kafka-reassign-partitions.sh
  replica-verification:
    command: opt/kafka/bin/bin-wrapper.bash
    plugs:
      - network
      - network-bind
      - mount-observe
    environment:
      bin_script: kafka-replica-verification.sh
  zookeeper-shell:
    command: opt/kafka/bin/bin-wrapper.bash
    plugs:
      - network
      - network-bind
      - mount-observe
    environment:
      bin_script: zookeeper-shell.sh
  run-class:
    command: opt/kafka/bin/bin-wrapper.bash
    plugs:
      - network
      - network-bind
      - mount-observe
    environment:
      bin_script: kafka-run-class.sh
  kafka-streams-application-reset:
    command: opt/kafka/bin/bin-wrapper.bash
    plugs:
      - network
      - network-bind
      - mount-observe
    environment:
      bin_script: kafka-streams-application-reset.sh
  transactions:
    command: opt/kafka/bin/bin-wrapper.bash
    plugs:
      - network
      - network-bind
      - mount-observe
    environment:
      bin_script: kafka-transactions.sh
  leader-election:
    command: opt/kafka/bin/bin-wrapper.bash
    plugs:
      - network
      - network-bind
      - mount-observe
    environment:
      bin_script: kafka-leader-election.sh
  dump-log:
    command: opt/kafka/bin/bin-wrapper.bash
    plugs:
      - network
      - network-bind
      - mount-observe
    environment:
      bin_script: kafka-dump-log.sh
  acls:
    command: opt/kafka/bin/bin-wrapper.bash
    plugs:
      - network
      - network-bind
      - mount-observe
    environment:
      bin_script: kafka-acls.sh
  cluster:
    command: opt/kafka/bin/bin-wrapper.bash
    plugs:
      - network
      - network-bind
      - mount-observe
    environment:
      bin_script: kafka-cluster.sh
  verifiable-consumer:
    command: opt/kafka/bin/bin-wrapper.bash
    plugs:
      - network
      - network-bind
      - mount-observe
    environment:
      bin_script: kafka-verifiable-consumer.sh
  verifiable-producer:
    command: opt/kafka/bin/bin-wrapper.bash
    plugs:
      - network
      - network-bind
      - mount-observe
    environment:
      bin_script: kafka-verifiable-producer.sh
  trogdor:
    command: opt/kafka/bin/bin-wrapper.bash
    plugs:
      - network
      - network-bind
      - mount-observe
    environment:
      bin_script: trogdor.sh
  keytool:
    command: usr/lib/jvm/java-18-openjdk-amd64/bin/keytool
    plugs:
      - mount-observe

parts:
  cruise-control:
    plugin: nil
    source: https://github.com/linkedin/cruise-control.git
    build-packages:
    - openjdk-11-jdk
    override-build: |
      ./gradlew jar && ./gradlew copyDependantLibs && cp -r ./* $CRAFT_PART_INSTALL
    stage:
    - config
    - cruise-control
    - cruise-control-metrics-reporter
    override-prime: |
      mkdir -p $CRAFT_PRIME/opt/cruise-control/libs
      mkdir -p $CRAFT_PRIME/opt/cruise-control/config

      cp $CRAFT_STAGE/cruise-control/build/dependant-libs/* $CRAFT_PRIME/opt/cruise-control/libs
      cp $CRAFT_STAGE/cruise-control/build/libs/* $CRAFT_PRIME/opt/cruise-control/libs
      cp $CRAFT_STAGE/cruise-control-metrics-reporter/build/libs/* $CRAFT_PRIME/opt/cruise-control/libs

      cp $CRAFT_STAGE/config/* $CRAFT_PRIME/opt/cruise-control/config

  kafka:
    plugin: nil
    source: https://github.com/canonical/central-uploader/releases/download/kafka_2.13-${SNAPCRAFT_PROJECT_VERSION}-ubuntu0/kafka_2.13-${SNAPCRAFT_PROJECT_VERSION}-ubuntu0-20240308100934.tgz
    after: [cruise-control]
    build-packages:
    - ca-certificates-java
    stage-packages:
    - openjdk-18-jre-headless
    - util-linux
    - libpsl5
    - curl
    override-build: |
      craftctl default
      mkdir -p $CRAFT_PART_INSTALL/opt/kafka
      cp -r ./* $CRAFT_PART_INSTALL/opt/kafka
    override-prime: |
      craftctl default
      mkdir -p $CRAFT_PRIME/opt/kafka/libs
      cp $CRAFT_STAGE/cruise-control-metrics-reporter/build/libs/cruise-control-metrics-reporter-* $CRAFT_PRIME/opt/kafka/libs

  prometheus-exporter:
    plugin: nil
    after: [kafka]
    override-build: |
      curl -o jmx_prometheus_javaagent.jar "https://repo1.maven.org/maven2/io/prometheus/jmx/jmx_prometheus_javaagent/0.18.0/jmx_prometheus_javaagent-0.18.0.jar"
      EXPECTED_SHA="fb569b5cb18494c22561a1eec10cb26e6117f057f6a5ac0ffe53dc16213a1dde"
      JAR_SHA=$(sha256sum jmx_prometheus_javaagent.jar | cut -d " " -f1)
      if [ $JAR_SHA != $EXPECTED_SHA ]; then exit 1; fi
      cp jmx_prometheus_javaagent.jar $SNAPCRAFT_PART_INSTALL/
    organize:
      jmx_prometheus_javaagent.jar: opt/kafka/libs/jmx_prometheus_javaagent.jar

  strimzi-oauth-libs:
    plugin: nil
    after: [kafka]
    override-build: |
      # provider jar version expected_sha
      JARS=(
        "io/strimzi kafka-oauth-common 0.14.0 9a7ede82ba018d222caf88eea39153c29f6e6bad29683d6e5b4c59d888e0ead0"
        "io/strimzi kafka-oauth-client 0.14.0 0bc0d53f864204aeb9fd53043314582b219bb4fa48a86c2f0b330a24cc33692d"
        "io/strimzi kafka-oauth-server 0.14.0 7d22afe08f612272ab59bdf8a1c971ee1fc8dd97cab8f32d097b50ae41216269"
        "io/strimzi kafka-oauth-server-plain 0.14.0 3d88dd85ec64fd027f7779d405817cbd653e5e88baddcd51af45d3b9876de091"
        "com/nimbusds nimbus-jose-jwt 9.37.1 95c19102a3f56e5ad818561710286d09e9e44f13656f9e991b2eb5a451493476"
      )
      for ENTRY in "${JARS[@]}"; do
        URL_BASE=https://repo1.maven.org/maven2
        PROVIDER=$(echo "$ENTRY" | awk '{print $1}')
        JAR_NAME=$(echo "$ENTRY" | awk '{print $2}')
        VERSION=$(echo "$ENTRY" | awk '{print $3}')
        EXPECTED_SHA=$(echo "$ENTRY" | awk '{print $4}')
        JAR_FILE="$JAR_NAME-$VERSION.jar"
        URL="$URL_BASE/$PROVIDER/$JAR_NAME/$VERSION/$JAR_FILE"
        curl -O "$URL"
        ACTUAL_SHA=$(sha256sum "$JAR_FILE" | awk '{print $1}')
        [ $ACTUAL_SHA != $EXPECTED_SHA ] && exit 1
      done
      DEST=$SNAPCRAFT_PRIME/opt/kafka/libs
      mkdir -p $DEST && cp *.jar $DEST
  wrapper:
    plugin: dump
    source: snap/local
